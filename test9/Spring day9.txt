[2-Layered 아키텍쳐]
Spring MVC를 기반으로 한 프로젝트 순서
1. xxx.do 요청
2. 서블릿 컨테이너가 .do를 보고 구동됨
	= DispatcherServlet을 생성
	DS-servlet.xml을 load(메모리에 적재)해서 생성
	현재의 계층(layer)을 "프레젠테이션 레이어"라고 표현함
3. 스프링컨테이너가 구동됨
	Controller 객체들 생성
	C 객체들이 Command 객체로 DAO 객체를 사용함
	 → DAO2를 사용하고 싶었으나 잘 안됨 >> @Autowired가 미리 되어있어야함
☆ C의 모든 메서드는 DAO 객체를 직접 이용하고 있다.
☆ Spring 에서는 DAO 객체를 직접 이용하지않고,
	반드시 "비즈니스 컴포넌트(ServiceImpl)"를 이용해서 DAO 객체를 다룰 수 있게끔 구성해야함
★ 반드시 "비즈니스 컴포넌트"를 사용해야하는 이유?
	1)  DAO 클래스 교체 등의 유지보수 유리
		비즈니스 컴포넌트의 입장에서는 자신을 이용하는 클라이언트가 Controller임
		클라이언트인 C는 S를 멤버변수로 사용하면 S가 변경되어도 C 자체는 변화 x
		== 낮은 결합도
	2) AOP 적용 용이
		횡단관심(어드바이스)이 동작하려면 Service 클래스의 비즈니스메서드가 실행되어야함
	
	결론) C클래스는 비즈니스 컴포넌트를 멤버변수로 사용해야하며, 그 객체에게 의존성주입(DI) 해야함

★오늘의 핵심★
- 비즈니스 컴포넌트를 이용하려면?
	Controller보다 ServiceImpl가 먼저 생성되어있어야함
	C에 SI가 의존성 주입 될 예정이기 때문에
	SI(비즈니스 컴포넌트)는 스프링컨테이너가 생성해줘야하는 객체
	SI를 생성하는 스프링컨테이너를 C를 생성하는 스프링컨테이너보다 먼저 구동시켜야함!!!

결론) 기존의 구조에서 스프링컨테이너가 1개 더 필요하고, 이 스프링컨테이너는 "기존의 스프링컨테이너보다 먼저" 구동되어야함!!

기존의 구조 + 스프링컨테이너x1
 → [ 2-Layered 아키텍쳐 ]
	기존의 Presentation Layer(MVC Layer)보다 "먼저 구동"되는 Business Layer가 추가된 형태
					     → ContextLoaderListener 등록(web.xml)
						= 리스너가 서블릿이기 때문에
						= /WEB-INF/applicationContext.xml이 기본 설정 경로기 때문에 바꿔줘야함 
							applicationContext.xml은 JAVA관련 설정파일이기때문에,
							<context-param> 설정을 추가하여 사용함 

[정리]
1. 서버(톰캣) 시작
2. web.xml 파일 로딩, 서블릿컨테이너 구동
3. 서블릿컨테이너는 web.xml에 등록된 ContextLoaderListener 객체를 가장 먼저 생성
	→ pre-loading
4. 컨텍스트로더리스너 객체는 src / main / resources의 applicationContext.xml을 로딩하여 스프링컨테이너를 구동시키라고 설정
	→ 먼저 실행되는 스프링컨테이너 == Root 컨테이너
5. ServiceImpl, DAO 객체들을 메모리에 생성
6. xxx.do 요청
7. 서블릿컨테이너 구동됨
	DispatcherServlet을 생성
	DS-servlet.xml을 로드해서 생성
	현재의 계층(layer)을 "프레젠테이션 레이어"라고한다!
8. 스프링컨테이너가 구동됨
	Controller 객체들 생성
	C 객체들이 Command 객체로 DAO 객체를 사용함
	 -> DAO2를 사용하고싶었으나 잘안됨. @Autowired가 미리 되어있어야함
