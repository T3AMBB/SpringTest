1. 톰캣 서버를 구동하면 웹 어플리케이션의 전반적인 설정 정보 ( jar, 라이브러리 정보 등) 을 담고 있는 web.xml이 로딩된다.
2. 서블릿 컨테이너가 구동됨
3. 서블릿 컨테이너는 web.xml 파일에 등록된 ContextLoaderListner 객체를 먼저 생성한다.
4. ContextLoaderListner 객체는 applicationContext.xml (비즈니스 레이어의 설정파일) 을 로딩한다.
5. 부모(루트) 컨테이너인 SpringContainer(Root)가 구동된다.


[서블릿 동작과정]
1. 사용자가 URL을 클릭하면 HTTP Request를 Servlet Container에 보낸다.
2. Servlet Container는 HttpServletRequest, HttpServletResponse 두 객체를 생성한다.
3. 사용자가 요청한 URL을 분석하여 어느 서블릿에 대한 요청인지 찾는다.
4. 컨테이너는 서블릿 service() 메소드를 호출하며, POST/GET 여부에 따라 doGet() 또는 doPost()가 호출된다.
5. doGet() 이나 doPost() 메소드는 동적인 페이지를 생성한 후 HttpServletResponse 객체에 응답을 보낸다.
6. 응답이 완료되면 HttpServletRequest, HttpServletResponse 두 객체를 소멸시킨다.


스프링 컨테이너
Spring Container는 Bean들의 생명주기를 관리한다. Spring Container는 어플리케이션을 구성하는 Bean들을 관리하기 위해 IoC를 사용한다. 
Spring Container 종류에는 BeanFactory와 이를 상속한 ApplicationContext가 존재한다. 이 두개의 컨테이너로 의존성 주입된 빈들을 제어하고 관리할 수 있다. 

[스프링 웹애플리케이션 동작원리]
1. 웹 애플리케이션이 실행되면 Tomcat(WAS)에 의해 web.xml이 로딩된다. (load-on-startup 으로 톰캣시작시 servlet 생성가능하도록 설정 가능)

2. web.xml에 등록되어 있는 ContextLoaderListener(Java Class)가 생성된다. ContextLoaderListener 클래스는 ServletContextListener 인터페이스를 구현하고 있으며, 
ApplicationContext를 생성하는 역할을 수행한다.

3. 생성된 ContextLoaderListener는 applicationContext.xml을 로딩한다.


4. applicationContext.xml에 등록되어 있는 설정에 따라 Spring Container가 구동된다. 이때 개발자가 작성한 비즈니스 로직에 대한 부분과 DAO, VO 객체들이 생성된다.

5. 클라이언트로부터 웹애플리케이션 요청이 온다.

6. DispatcherServlet(Servlet)이 생성된다. DispatcherServlet은 FrontController의 역할을 수행한다. 
클라이언트로부터 요청 온 메시지를 분석하여 알맞은 PageController에게 전달하고 응답을 받아 요청에 따른 응답을 어떻게 할지 결정만 한다.
실질적인 작업은 PageController에서 이뤄지기 때문이다. 이러한 클래스들을 HandlerMapping, ViewResolver 클래스라고 한다.

★ 7. DispatcherServlet은 servlet-context.xml(spring-mvc.xml)을 로딩한다. DispatcherServlet이 Spring Container인 DispatcherServlet-servlet.xml을 로딩하는 것 ★

8. 두번째 Spring Container가 구동되면 응답에 맞는 PageController들이 동작한다.
이때 첫번째 Spring Container가 구동되면서 생성된 DAO, VO, ServiceImpl 클래스들과 협업하여 알맞은 작업을 처리하게 된다.



root = applicationContext





pom.xml = jar등의 라이브러리 등록용 


web.xml = sevlet류 = 서블릿 , 필터 , 리스너
	  Deploy할 때 , Servlet의 정보를 설정해준다.
	  브라우저가 JavaServlet에 접근하기 위해서는 WAS(EX.Tomcat)에 필요한 정보를 알려줘야 해당하는 Servlet을 호출 할 수 있음
	  정보1) 배포할 Servlet이 무엇인지
	  정보2) 해당 Servlet이 어떤 URL에 매핑되는지
	  --> 나는 현재
	  1) 배포할 서블릿 : DispatcherServlet
	  2) *.do 요청을 할때, DispatcherServlet를 매핑해달라



applicationContext.xml = 일반 java 객체용 - 의존성주입 때 필요한 커맨드객체를 미리 만들기 위한 것이라고 생각하면 좋음



DispatcherServlet = Spring Container를 생성한다. Controller의 LifeCycle 관리
		 클라이언트의 요청을 처음으로 받는 클래스 (Spring에서 제공)
		 클라이언트의 요청을 Handler(Controller)에 보낸다.